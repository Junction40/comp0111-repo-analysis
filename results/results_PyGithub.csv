repo,pr_ID,suggestion,bassist_comment,comment_text,comment_code,action,response_time,url
b'PyGithub/PyGithub',2660,True,False,b' - CODE - ',"b'def payload(self) -> Dict[str, Any]:'",Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/2660#discussion_r1269819892
b'PyGithub/PyGithub',2660,False,False,"b'no, `from __future__ import annotations`'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2660#discussion_r1269828415
b'PyGithub/PyGithub',2658,False,False,"b""Why is this moved? let's keep the dif minimal for easier review...""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2658#discussion_r1269819192
b'PyGithub/PyGithub',2658,False,False,b'EnricoMi think this is better',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2658#discussion_r1269829679
b'PyGithub/PyGithub',2655,False,False,"b""`TypeGuard` can't narrow type in negative case, so we have to use `not is_defined(files)` or `isinstance(files, _NotSetType)`, and I think the latter is better""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2655#discussion_r1267125883
b'PyGithub/PyGithub',2638,True,False,"b'this is annoying...can we have - CODE - and `StatsCodeFrequency` only implements `useTupleAttributes`?and in `_storeAndUseAttributes`:    def _storeAndUseAttributes(self, headers: Dict[str, Union[str, int]], attributes: Any) -> None:        # Make sure headers are assigned before calling _useAttributes        # (Some derived classes will use headers in _useAttributes)        self._headers = headers        self._rawData = attributes        if isinstance(attributes, Dict):            self._useAttributes(attributes)        elif isinstance(attributes, tuple):            self._useTupleAttributes(attributes)        elif:            raise ValueError()Ideally, we would have this type checking in `_useAttributes` and have `_useDictAttributes`, but this would touch almost any file.'","b'def _useAttributes(self, attributes: Dict[str, Any]) -> None:\n        raise NotImplementedError(""dict attributes not supported by this class"")\n\n    def _useTupleAttributes(self, attributes: Tuple[Any, ...]) -> None:\n        raise NotImplementedError(""tuple attributes not supported by this class"")\n```'",Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/2638#discussion_r1266526363
b'PyGithub/PyGithub',2638,False,False,"b""This looks like a good idea but doesn't rename `_useAttributes` to `_useDictAttributes` may be misleading""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2638#discussion_r1266547558
b'PyGithub/PyGithub',2638,False,False,"b""after second thought, I don't think `_useTupleAttributes` is a good idea, this \r\nadded additional complexity. using `_useAttributes` is easy to understand and easy to impl.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2638#discussion_r1266563171
b'PyGithub/PyGithub',2638,False,False,"b'But `_useAttributes(Any)` is pretty brutal. Any other suggestions to avoid `Any`? The implementing classes should be specific about their `attributes` parameter.\r\n\r\nCan they define it as eihter `Dict[str, Any]` or `Tuple[Any, ...]`?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2638#discussion_r1266881823
b'PyGithub/PyGithub',2638,False,False,"b""I don't think it's a problem, only impl class know what type the value is.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2638#discussion_r1266900390
b'PyGithub/PyGithub',2630,False,False,b'please use `NotSet` as default value',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2630#discussion_r1264338702
b'PyGithub/PyGithub',2626,False,False,"b""I'd prefer to create an `Enterprise` class that wraps the `/enterprise/{enterprise}` path prefix. That class can provide all endpoints that start with this prefix.\r\n\r\nThen, `MainClass` would have only `get_enterprise(enterprise: str) -> Enterprise`.\r\n\r\nReturned `Enterprise` instance then has `get_consumed_licenses() -> EnterpriseConsumedLicenses`.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263567601
b'PyGithub/PyGithub',2626,False,False,"b'Please embed typing of new files in the `py` file. For examples, see https://github.com/PyGithub/PyGithub/commit/8bdfc3a0d7fc7391ff34e60e20a6987433025417'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263572368
b'PyGithub/PyGithub',2626,False,False,"b'Thank you for your quick feedback! Sure, I agree with that, will check and update it. '",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263669754
b'PyGithub/PyGithub',2626,False,False,"b'Sure, will embed it in the `py` file without the `pyi` file. '",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263670911
b'PyGithub/PyGithub',2626,False,False,b'put `_initAttributes` before `__repr__`',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263928504
b'PyGithub/PyGithub',2626,True,False,b' - CODE - ',b'self._login: Attribute[...] = NotSet\n        self._url: Attribute[...] = NotSet',Accepted,202.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263928902
b'PyGithub/PyGithub',2626,False,False,b'These two suggestions( and `_initAttributes` ) also apply on `github/EnterpriseConsumedLicenses.py` and `github/NamedEnterpriseUser.py`',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263929925
b'PyGithub/PyGithub',2626,True,False,"b' - CODE - we have typing, this is not needed'",b'',Accepted,1512.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263934017
b'PyGithub/PyGithub',2626,False,False,b'Thank you. Fixed it.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263935445
b'PyGithub/PyGithub',2626,False,False,"b'remove this file, use inline typing'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263936894
b'PyGithub/PyGithub',2626,False,False,b'Thank you. did it.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263956507
b'PyGithub/PyGithub',2626,False,False,b'Thank you. did it.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263956694
b'PyGithub/PyGithub',2626,False,False,b'Thank you. did it.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263956913
b'PyGithub/PyGithub',2626,False,False,b'why there is a `u` prefix?\r\n\r\nAre you using python2?',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263958269
b'PyGithub/PyGithub',2626,False,False,"b""No, I use python3. I just followed others in MainClass.rst such like u'Wan Liuyang' in Get user by name section. """,No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263961626
b'PyGithub/PyGithub',2626,False,False,"b""I think we should remove this `u` prefix, we don't support python2 anymore.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263964479
b'PyGithub/PyGithub',2626,False,False,b'Sure. Will remove it. May I remove others in the file as well?',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263966526
b'PyGithub/PyGithub',2626,False,False,"b'maybe leave others as-is, not related to this PR.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263967096
b'PyGithub/PyGithub',2626,False,False,"b""I just removed it only this PR's one. """,No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1263971809
b'PyGithub/PyGithub',2626,True,False,"b'The thing with object `Enterprise` is that it does not exist w.r.t. the Github API. We merely have this class to collect all endpoints hat start with `/enterprise/{enterprise}` under one class.Firstly, this is `NonCompletableGithubObject`, secondly, we create it from a requester and the enterprise name: - CODE - '","b'class Enterprise(NonCompletableGithubObject):\n    """"""\n    This class represents Enterprises. Such objects do not exist in the Github API, so this class merely collects all endpoints the start with /enterprise/{enterprise}/. See methods below for specific endpoints and docs.\n    """"""\n\n    def __init__(\n        self,\n        requester: ""Requester"",\n        slug_or_id: str,\n    ):\n        super().__init__(requester, {}, {""slug_or_id"": slug_or_id, ""url"": s""/enterprise/{slug_or_id}""}, True)\n\n```'",Accepted,69033.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265339430
b'PyGithub/PyGithub',2626,False,False,"b""Docs call he `enterprise` parameter\r\n\r\n> The slug version of the enterprise name. You can also substitute this value with the enterprise id.\r\n\r\nhttps://docs.github.com/en/enterprise-cloud@latest/rest/enterprise-admin/license?apiVersion=2022-11-28#list-enterprise-consumed-licenses\r\n\r\nSo I'd rather go for `slug_or_id`.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265343505
b'PyGithub/PyGithub',2626,False,False,b'such assertion should go into `__init__`.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265347381
b'PyGithub/PyGithub',2626,True,False,b'rather use `self.url`: - CODE - ',"b'headers, data = self._requester.requestJsonAndCheck(""GET"", self.url + ""/consumed-licenses"")\n```'",Accepted,68428.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265351952
b'PyGithub/PyGithub',2626,False,False,b'I would not add `login` to the returned instance if it is not part of the response data.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265354579
b'PyGithub/PyGithub',2626,True,False,b' - CODE - ',b'class EnterpriseConsumedLicenses(NonCompletableGithubObject):',Accepted,68269.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265355325
b'PyGithub/PyGithub',2626,True,False,b' - CODE - ',b'def get_consumed_licenses(self) -> EnterpriseConsumedLicenses:',Accepted,68161.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265357574
b'PyGithub/PyGithub',2626,False,False,b'Where are these filters documented?',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265363160
b'PyGithub/PyGithub',2626,False,False,"b'That is weird, we are requesting the same url as in `Enterprise.get_consumed_licenses`.\r\n\r\nFrom the docs, it looks like we retrieve the `EnterpriseConsumedLicenses` object with an `users` attributes, for which we have retrieved the first page. There is no other endpoint that behaves like that.\r\n\r\nI think this requires some extension of PaginatedList, or we fetch the first page again when accessing the `users` attribute (as you propose).'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265395238
b'PyGithub/PyGithub',2626,True,False,b'This then simplifies to - CODE - ',"b'assert isinstance(login, str), login\n        # There is no native ""/enterprise/{enterprise}"" api, so this function is a hub for apis that start with ""/enterprise/{enterprise}"".\n        return github.Enterprise.Enterprise(self.__requester, login)\n```'",Accepted,66737.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1265399314
b'PyGithub/PyGithub',2626,False,False,"b'Thank you for the feedback! I also thought that\'s weird to request the same url for both of them. However, unfortunatelly, there are two types of responses in this API. When a user want to get just ""total seat puchased"", the user don\'t have to do pagenation because the value of total seat purchased is already in the first page of response. There is a wasted time while the pagenation roop. \r\n> or we fetch the first page again when accessing the users attribute (as you propose). \r\n\r\nThat\'s why I proposed it. This kind of mixed result is rare case, I think we shouldn\'t update PaginatedList for this.\r\n'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266222108
b'PyGithub/PyGithub',2626,False,False,"b""That's my mistake. Removed it.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266223272
b'PyGithub/PyGithub',2626,False,False,b'Thank you. Fixed it. ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266226027
b'PyGithub/PyGithub',2626,False,False,b'Thank you. Fixed it.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266226325
b'PyGithub/PyGithub',2626,False,False,b'Thank you. Fixed it.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266226420
b'PyGithub/PyGithub',2626,False,False,b'Thank you. Fixed it.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266226499
b'PyGithub/PyGithub',2626,False,False,b'Thank you. Fixed it.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266433102
b'PyGithub/PyGithub',2626,False,False,b'Thank you. Fixed it.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266434863
b'PyGithub/PyGithub',2626,False,False,b'@EnricoMi To use CompletableGithubObject looks be able to use for EnterpriseConsumedLicenses but should use NonCompletableGithubObject? ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266450293
b'PyGithub/PyGithub',2626,False,False,"b'Before we start extending PaginatedList, can I ask you to create some simple tests for `MainClass.get_enterprise` and `Enterprise.get_consumed_licenses`? For now without iterating over `users`? This requires recording test data, which will help me understand how exactly the pagination of `/enterprises/{enterprise}/consumed-licenses` might work. Please feel free to obfuscate enterprise specific content.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266470186
b'PyGithub/PyGithub',2626,True,False,b' - CODE - ',b'def get_users(self) -> PaginatedList[NamedEnterpriseUser]:',Accepted,55039.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266470873
b'PyGithub/PyGithub',2626,True,False,b' - CODE - ',b'This class represents licenses consumed by enterprises. The reference can be found here https://docs.github.com/en/enterprise-cloud@latest/rest/enterprise-admin/license#list-enterprise-consumed-licenses',Accepted,54988.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266471951
b'PyGithub/PyGithub',2626,True,False,b' - CODE - ',"b'if ""url"" not in data:\n            data[""url""] = self.url + ""/consumed-licenses""'",Accepted,54955.0,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266472625
b'PyGithub/PyGithub',2626,False,False,"b""I can create some simple tests but I actually don't have any enterprise ids for testing. Is there any of them for testing here? Or just create tests with blank on enterprise id?""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266531990
b'PyGithub/PyGithub',2626,False,False,"b""I thought you'd have access to some enterprise instance, otherwise, how would you know these changes work?""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266543095
b'PyGithub/PyGithub',2626,False,False,"b'I mean, I have our company own enterprise instance and I can access and test with it, but our company cannot give the access to not a company members. '",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266550276
b'PyGithub/PyGithub',2626,False,False,"b'There is no need  to give access to any one, simply record the data for the tests against your enterprise instance, obfuscate data where really needed and add the test data to your pull request. Once recorded, nobody needs access to the targeted enterprise instance to run the tests.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1266893806
b'PyGithub/PyGithub',2626,False,False,"b""Understand. I haven't been doing this kind of testing without actual api call, but will try to find out how to do this on. """,No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2626#discussion_r1267398917
b'PyGithub/PyGithub',2623,False,False,b'There should also be an `edit` method in class `Variable` and `Secret`. Then it is arguable to remove this (reduces footprint of Repository class).',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2623#discussion_r1263391952
b'PyGithub/PyGithub',2623,False,False,"b'Please update the urls, here from\r\n\r\n    https://docs.github.com/en/rest/reference/actions/variables#create-a-repository-variable\r\n\r\nto\r\n\r\n    https://docs.github.com/en/rest/actions/variables#create-a-repository-variable\r\n\r\n'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2623#discussion_r1263399367
b'PyGithub/PyGithub',2623,False,False,"b'Maybe note that this only works for organization variables with ""selected"" visibility, not for repo variables.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2623#discussion_r1263403118
b'PyGithub/PyGithub',2623,False,False,b'Maybe we put `create_secret` before `get_secret` and `get_secrets`.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2623#discussion_r1263403912
b'PyGithub/PyGithub',2623,False,False,b'Please see https://github.com/PyGithub/PyGithub/commit/8bdfc3a0d7fc7391ff34e60e20a6987433025417 for some examples how to inline typing into the `.py` file.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2623#discussion_r1263405896
b'PyGithub/PyGithub',2623,False,False,"b'This means we are fetching the list of selected repositories whenever we create a secret instance, no matter if it is used or not. We like to avoid unnecessary API calls.\r\n\r\nFurther, this list of repos is paginated, so this would fetch only the first 30 repos.\r\n\r\nIdeally, `selected_repositories` returns a paginated list of the repos:\r\n\r\n    @property\r\n    def selected_repositories(self) -> PaginatedList[Repository]:\r\n        return github.PaginatedList.PaginatedList(\r\n            github.Repository.Repository,\r\n            self._requester,\r\n            self.selected_repositories_url,\r\n            {},\r\n            list_item=""repositories"",\r\n        )\r\n'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2623#discussion_r1263417839
b'PyGithub/PyGithub',2623,False,False,"b'Alternatively, we could have `class OrganizationVariable(Variable)`, which has `add_repo` and `remove_repo`, and `Organization.get_variable` returns `OrganizationVariable`.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2623#discussion_r1263419996
b'PyGithub/PyGithub',2614,False,False,b'Also use `--black` flag ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1255456358
b'PyGithub/PyGithub',2614,True,False,b' - CODE - ',"b'args: [""--in-place"", ""--black""]'",Accepted,15.0,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1255510829
b'PyGithub/PyGithub',2614,False,False,b'What is this? An attempt to correct spelling?',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1266500332
b'PyGithub/PyGithub',2614,False,False,"b'tbh, not sure, I dont think I did it manually'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1266531563
b'PyGithub/PyGithub',2614,False,False,b'But shall this be caught by the spellchecker?',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1266532145
b'PyGithub/PyGithub',2614,False,False,"b'ok, this also seems wrong'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1267307563
b'PyGithub/PyGithub',2614,False,False,"b'well it is the same as the original, right, so no docformater issue...'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1267308606
b'PyGithub/PyGithub',2614,False,False,"b'ok, I think in this case the docstring shall be marked with r to be parsed as RST'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1267829476
b'PyGithub/PyGithub',2613,False,False,b'message is in lower case',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2613#discussion_r1255424443
b'PyGithub/PyGithub',2613,True,False,b' - CODE - ',"b'if ""saml enforcement"" in message.lower():'",Accepted,13.0,https://github.com/PyGithub/PyGithub/pull/2613#discussion_r1255501127
b'PyGithub/PyGithub',2613,False,False,b'message is already lower',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2613#discussion_r1255686262
b'PyGithub/PyGithub',2613,True,False,b' - CODE - ',"b'if ""saml enforcement"" in message:'",Accepted,7.0,https://github.com/PyGithub/PyGithub/pull/2613#discussion_r1255802099
b'PyGithub/PyGithub',2542,True,False,b' - CODE - ',b'def rerequest(self) -> bool:',Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/2542#discussion_r1241020488
b'PyGithub/PyGithub',2542,True,False,b' - CODE - ',b':calls: `POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest <https://docs.github.com/en/rest/checks/runs?apiVersion=2022-11-28#rerequest-a-check-run>`_',Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/2542#discussion_r1241613865
b'PyGithub/PyGithub',2537,False,False,b'use new generic `github.GithubObkect.Attribute`',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2537#discussion_r1245027489
b'PyGithub/PyGithub',2537,False,False,b'No need to fo this ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2537#discussion_r1245028506
b'PyGithub/PyGithub',2537,False,False,b'No need to use docstring for types ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2537#discussion_r1245029278
b'PyGithub/PyGithub',2537,False,False,b'Merge upstream please ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2537#discussion_r1245030022
b'PyGithub/PyGithub',2514,True,False,b' - CODE - ',"b'sphinx >6, <8'",Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/2514#discussion_r1252216494
b'PyGithub/PyGithub',2475,False,False,b'Please add inline pep484 type ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2475#discussion_r1245033881
b'PyGithub/PyGithub',2402,False,False,"b""what's this\xef\xbc\x9f""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2402#discussion_r1245035339
b'PyGithub/PyGithub',2389,False,False,"b'Should this be Union[str, _NotSetType] ? since the parameter created is a string as mentioned in GitHub Docs\r\nhttps://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2389#discussion_r1065378608
b'PyGithub/PyGithub',2389,False,False,"b'I think we can use str or datetime, if using datetime, we can convert it to str internally \r\n\r\nAlso need to keep pyi synced with py.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2389#discussion_r1245039434
b'PyGithub/PyGithub',2356,False,False,b'can you also add inline type\xef\xbc\x9f',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2356#discussion_r1245042017
b'PyGithub/PyGithub',2316,False,False,"b""These look so close that could combine them? Add another argument for kind/type and assert it's one of actions or dependabot, since everything else is identical.\r\n\r\nFurther, I also like to support passing in the repository id as an int as well, but that's a nice to have.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2316#discussion_r1083646024
b'PyGithub/PyGithub',2316,False,False,"b'@s-t-e-v-e-n-k  fixed  can you recheck, please '",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2316#discussion_r1086011882
b'PyGithub/PyGithub',2316,False,False,"b""Does this fail the docs build? It's actually /orgs/{org}/{secret_type} anyway.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2316#discussion_r1099622299
b'PyGithub/PyGithub',2316,False,False,b'fixed please recheck ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2316#discussion_r1101470724
b'PyGithub/PyGithub',2278,False,False,b'Attribute `parent_team_id` of `Organization` has to be set in `_useAttributes`',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2278#discussion_r1257200637
b'PyGithub/PyGithub',2278,False,False,b'Can we assert the `parent_team_id` in `testAttributes`? I may have to record replay data for this.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2278#discussion_r1257201270
b'PyGithub/PyGithub',2268,False,False,"b'not related to the function description \r\ndesc\r\n`:calls: \'PUT {org_url}/actions/secrets/{secret_name}`\r\n\r\nfunc:\r\n\r\n`""PUT"", f""{self.url}/repositories/{repo.id}""`'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2268#discussion_r978139253
b'PyGithub/PyGithub',2268,False,False,"b'same here may \r\n` :calls: \'DELETE {org_url}/actions/secrets/{secret_name}`\r\n\r\n`""DELETE"", f""{self.url}/repositories/{repo.id}""`'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2268#discussion_r978139967
b'PyGithub/PyGithub',2265,True,False,b' - CODE - ',b'def members_allowed_repository_creation_type(self) -> str: ...',Accepted,939928.0,https://github.com/PyGithub/PyGithub/pull/2265#discussion_r1224034297
b'PyGithub/PyGithub',2265,False,False,b'Please add this test to `Organization.py`.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2265#discussion_r1224036830
b'PyGithub/PyGithub',2066,False,False,"b""This change is one reason why CI fails -- sadly it's a sharp edge.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2066#discussion_r726765963
b'PyGithub/PyGithub',2066,False,False,b'I do wonder if this actually throws an exception?',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2066#discussion_r726766428
b'PyGithub/PyGithub',2066,False,False,"b""Yeah, I was ... confused. I think I've fixed it, though? We'll see when the tests finish again, I guess.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2066#discussion_r730050590
b'PyGithub/PyGithub',2066,False,False,"b'The only two error codes GitHub gives you on failure are either ""409 Conflict"" if you have a merge conflict or ""422 Unprocessable Entity"" if ""some other reason"" prevented the merge. I briefly thought of raising an exception on the 422, and returning `False` for 409, but I wasn\'t totally sure everything related to a 422 was something truly exceptional. But it sort of makes sense, I guess? Maybe if I use the response message as the exception text?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2066#discussion_r730053407
b'PyGithub/PyGithub',1791,False,False,"b""I also don't think this method belongs in the `Installation` object as that is a `NonCompletable` and also the API call does not depend on any of the Installation attributes. It should be moved to the `github.Github.get_installation_repos`.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r545713464
b'PyGithub/PyGithub',1791,False,False,"b'Hey, should we add a deprecation warning for this method instead of removing it completely?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r548355483
b'PyGithub/PyGithub',1791,False,False,"b""There's a :meth: link, I *think* there's an existing example, means the method and the class are both links.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r589147579
b'PyGithub/PyGithub',1791,False,False,"b'That would be nice, particularly if you only have an installation token and are not generating one. This is what happens in Github Actions.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r696783977
b'PyGithub/PyGithub',1791,False,False,b'This is now implemented by `GithubInstallation.get_app_installation(installation_id)`.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r1244847694
b'PyGithub/PyGithub',1791,False,False,"b'This is now implemented by `GithubIntegration.get_repo_installation(owner, repo)`.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r1244848488
b'PyGithub/PyGithub',1791,False,False,"b'Class `github.Github` is already cluttered with lots of class specific methods.\r\n\r\nWhy is `Github.get_installation_repos` better than `installation.get_repos`? With the latter it is clear that this requires an installation auth, while `Github` can be used with lots of different authentications, but that method works only with an installation auth.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r1244858515
b'PyGithub/PyGithub',1784,False,False,"b'Just return create_git_ref, we can deal with its return value. This function also needs a docstring.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543974097
b'PyGithub/PyGithub',1784,False,False,b'Perhaps a default value for force of False? And also need a docstirng.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543974753
b'PyGithub/PyGithub',1784,False,False,b'As above -- just return the call to GitRef.delete()',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543975233
b'PyGithub/PyGithub',1784,False,False,b'Can you use with assertRaises() so we can see the content of the exception? There are a few other examples in the code base.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543976352
b'PyGithub/PyGithub',1784,False,False,b'As above.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543976485
b'PyGithub/PyGithub',1784,True,False,b'You are just saying:  - CODE - ',"b'return self.head.repo.create_git_ref(""refs/heads/"" + self.head.ref, sha=self.head.sha)\n```'",Accepted,1050523.0,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r544405780
b'PyGithub/PyGithub',1784,False,False,"b""I mean, it sort of does, but it also doesn't. I'd prefer this linked to create_git_ref using :meth: or something similar.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600127446
b'PyGithub/PyGithub',1784,False,False,"b'This can now be `f""refs/heads/{self.head.ref}""`'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600128023
b'PyGithub/PyGithub',1784,False,False,"b'False is implied, just self.delete_branch()'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600128193
b'PyGithub/PyGithub',1784,False,False,"b""Does it, though? We call delete() on that, so surely it's bool""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600128591
b'PyGithub/PyGithub',1784,False,False,"b'Same comment as above, we call a method to do the work here.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600128737
b'PyGithub/PyGithub',1784,False,False,"b""Personally, I'd prefer:\r\n\r\n```\r\nif not force:\r\n    <check remaining PRs>\r\nreturn self.head.repo.get_git_ref...\r\n```""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600129109
b'PyGithub/PyGithub',1784,False,False,b'Can also be an f-string now',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600129214
b'PyGithub/PyGithub',1784,False,False,"b""with self.assertRaises(github.GithubException) ...   which also means you don't need the import at the top""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600129491
b'PyGithub/PyGithub',1784,False,False,b'assertIs when checking against None',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600131712
b'PyGithub/PyGithub',1784,False,False,b'Convenience function that calls :meth:`Repository.create_git_ref`',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806623
b'PyGithub/PyGithub',1784,False,False,b'As above',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806639
b'PyGithub/PyGithub',1784,False,False,b'This branch is no longer required.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806657
b'PyGithub/PyGithub',1784,False,False,"b""Are any PRs linked to a force deleted branch also deleted? I'd be interested to see if that is the case.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806767
b'PyGithub/PyGithub',1784,False,False,"b'github is always injected into the test classes, you can drop this import.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806811
b'PyGithub/PyGithub',1784,False,False,"b""Check the raised exception data once, I don't see the need to repeat it everywhere.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806872
b'PyGithub/PyGithub',1784,False,False,"b'Understood, would you say we remove line 421 or remove lines 422-429?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r603479355
b'PyGithub/PyGithub',1784,False,False,"b'Yes, a PR with the head ref being the branch that is deleted gets closed.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r603483025
b'PyGithub/PyGithub',1784,False,False,b'Oops.. I tested with the branch of this PR \xf0\x9f\xa4\xa6 ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r603484088
b'PyGithub/PyGithub',1784,False,False,b'Removing this line causes the test cases in this file to fail. See https://github.com/PyGithub/PyGithub/actions/runs/698739235',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r603501940
b'PyGithub/PyGithub',1784,False,False,b'Missing `.pyi` file API addition',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1218170338
b'PyGithub/PyGithub',1784,False,False,b'Missing `.pyi` file API modification',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1218170620
b'PyGithub/PyGithub',1784,False,False,b'Missing `.pyi` file API addition',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1218170731
b'PyGithub/PyGithub',1784,True,False,b' - CODE - ',"b'delete_branch=False,'",Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244807292
b'PyGithub/PyGithub',1784,False,False,"b""To be honest, I don't like adding this side-effect here. Given we have `delete_branch`, it is very easy for users to delete the branch with a single line after `merge` returned. When more pull requests remain, `delete_branch` raises an error and call site does not get the successful `PullRequestMergeStatus` response.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244815162
b'PyGithub/PyGithub',1784,True,False,"b'I would not call this `AttributeError`, because the values of the attributes are right, This is more a `RuntimeError`, as `delete_branch(force=False)` should not be called as long as there exist pull requests. - CODE - '","b'raise RuntimeError(\n                    ""This branch is referenced by open pull requests, set force=True to delete this branch.""\n                )\n```'",Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244821525
b'PyGithub/PyGithub',1784,False,False,b'Please add some notes on the semantics of `force`.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244823030
b'PyGithub/PyGithub',1784,True,False,b'Why this assertion? - CODE - ',b'self.delete_restore_pull.delete_branch(force=False)\n```',Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244831624
b'PyGithub/PyGithub',1676,False,False,"b'List[] including the types, such as List[str], please.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r481704246
b'PyGithub/PyGithub',1676,False,False,"b'Can we have a better name, such as OrganizationAuthorization?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r481705556
b'PyGithub/PyGithub',1676,False,False,"b""You also need to test delete, but I'd also prefer we return something so we can verify the returned attributes.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r481705848
b'PyGithub/PyGithub',1676,False,False,b'space in the email address.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r481706360
b'PyGithub/PyGithub',1676,False,False,"b'I will need to wait in that case, since the only Organization I have available at the moment,with SAML SSO, is private. I can not display the credentials list in the --record. I will ask GitHub sales for a trial for Entreprise Org hosted on GitHub.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r484069993
b'PyGithub/PyGithub',1676,False,False,"b""list of :class:`github.AuthorizationOrganization.AuthorizationOrganization`_\r\n\r\n(I'm not certain of the formatting, but roughly that, please)""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r512400756
b'PyGithub/PyGithub',1676,False,False,b'The return type is not None.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r512400964
b'PyGithub/PyGithub',1676,False,False,"b""I'd like more detail here, along with a link to the documentation of the object.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r512401210
