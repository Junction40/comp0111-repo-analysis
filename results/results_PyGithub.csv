repo,pr_ID,suggestion,bassist_comment,comment_text,comment_code,action,response_time,url
b'PyGithub/PyGithub',2617,False,False,"b""also doesn't look necessary""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2617#discussion_r1257968452
b'PyGithub/PyGithub',2617,True,False,b' - CODE - ',b'',Accepted,5.0,https://github.com/PyGithub/PyGithub/pull/2617#discussion_r1257971167
b'PyGithub/PyGithub',2617,False,False,"b""If we enable ruff's isort feature we should remove isort related hooks and config from pre-commit config, for exampel `.isort.cfg`, `https://github.com/pre-commit/mirrors-isort` and `https://github.com/asottile/seed-isort-config`""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2617#discussion_r1257981645
b'PyGithub/PyGithub',2617,False,False,b'I think we can make all rules as fixable in pre-commit hooks',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2617#discussion_r1258044026
b'PyGithub/PyGithub',2617,False,False,b'Why? In some comment before you complained about having config in precommit... ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2617#discussion_r1258070758
b'PyGithub/PyGithub',2617,False,False,"b'because config file is for both IDE/editor plugin and pre-commit hooks, I think this rule should be unfixable in IDE/editor plugin and fixed in pre-commit hook.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2617#discussion_r1258125267
b'PyGithub/PyGithub',2617,False,False,b'This one is the https://github.com/PyGithub/PyGithub/pull/2608 ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2617#discussion_r1258127106
b'PyGithub/PyGithub',2617,False,False,"b'No, you need to be consistent '",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2617#discussion_r1258160012
b'PyGithub/PyGithub',2614,False,False,b'Also use `--black` flag ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1255456358
b'PyGithub/PyGithub',2614,True,False,b' - CODE - ',"b'args: [""--in-place"", ""--black""]'",Accepted,15.0,https://github.com/PyGithub/PyGithub/pull/2614#discussion_r1255510829
b'PyGithub/PyGithub',2613,False,False,b'message is in lower case',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2613#discussion_r1255424443
b'PyGithub/PyGithub',2613,True,False,b' - CODE - ',"b'if ""saml enforcement"" in message.lower():'",Accepted,13.0,https://github.com/PyGithub/PyGithub/pull/2613#discussion_r1255501127
b'PyGithub/PyGithub',2613,False,False,b'message is already lower',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2613#discussion_r1255686262
b'PyGithub/PyGithub',2613,True,False,b' - CODE - ',"b'if ""saml enforcement"" in message:'",Accepted,7.0,https://github.com/PyGithub/PyGithub/pull/2613#discussion_r1255802099
b'PyGithub/PyGithub',2611,False,False,b'why make it so complicated here',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1254902823
b'PyGithub/PyGithub',2611,False,False,b'Is this the reason you suggest this ?\r\n\r\nhttps://github.com/PyGithub/PyGithub/pull/2591#issuecomment-1619670289',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1254904365
b'PyGithub/PyGithub',2611,False,False,"b'The response from Github causes the `GithubException`, which we want to prevent by retrying, but the logic to determine the right backoff raised some exception itself, which should never happen. So I want to preserve the inner exception with stacktrace to better understand and debug the root cause, amend it with some meaningful error message (`RuntimeError`), but still provide the usual `GithubException` based on the response from Github.\r\n\r\nThe chain is more appropriate here than adding an error message to the outer `GithubException`.\r\n\r\nI could not find a nicer syntax to do the chaining, something like `raise GithubException() from RuntimeError() from e`.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1255379088
b'PyGithub/PyGithub',2611,False,False,b'maybe exception group? https://peps.python.org/pep-0654/',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1255383522
b'PyGithub/PyGithub',2611,False,False,"b'I think we can add a extra message field in GithubException and use `""Failed to inspect response message""` as exception message? then it\'s `raise GithubException(, msg=""failed to ..."") from e`'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1255385514
b'PyGithub/PyGithub',2611,False,False,"b'Yes, we should add the message field, but I would not use it here, because that error message is not coming from / caused by Github, but from PyGithub library. Hence the cause chain.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1255830215
b'PyGithub/PyGithub',2611,False,False,"b'Maybe I miss something, but why raise an exception that you are also immediately absorbing so does not go anywhere...'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1256125546
b'PyGithub/PyGithub',2611,True,False,b' - CODE - ',"b'raise GithubException(\n                            response.status, ""Failed to determine retry `backoff`. "" + content, response.headers\n                        ) from e'",Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1256127126
b'PyGithub/PyGithub',2611,False,False,"b'To create an exception chain, GithubException caused by RuntimeError, caused by e.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1256179179
b'PyGithub/PyGithub',2611,False,False,"b'The `GithubException` carries the response from Github (status, JSON content, headers), but the `""Failed to determine retry backoff""` bit is coming from our poor code, I think that should be separated. Github does not send that, hence the `RuntimeError`. Btw., `content` is  a `Dict[str, Any]`.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2611#discussion_r1256181441
b'PyGithub/PyGithub',2607,False,False,"b""this can be refactored with new type-assert utils, but I'm hoping not to touch much logic in this PR""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2607#discussion_r1255590212
b'PyGithub/PyGithub',2599,False,False,"b""I think the default exclude already cover this, isn't it?""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2599#discussion_r1257944710
b'PyGithub/PyGithub',2599,True,False,b' - CODE - ',b'',Accepted,11.0,https://github.com/PyGithub/PyGithub/pull/2599#discussion_r1257959621
b'PyGithub/PyGithub',2599,False,False,b'why removed?',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2599#discussion_r1257976885
b'PyGithub/PyGithub',2570,False,False,b'types of attributes are not defined for this class',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2570#discussion_r1241685058
b'PyGithub/PyGithub',2570,False,False,b'types of attributes are not defined for this class',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2570#discussion_r1241689024
b'PyGithub/PyGithub',2570,False,False,b'types of attributes are not defined for this class',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2570#discussion_r1241690190
b'PyGithub/PyGithub',2570,False,False,b'types of attributes are not defined for this class',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2570#discussion_r1241691669
b'PyGithub/PyGithub',2570,False,False,b'types of attributes are not defined for this class',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2570#discussion_r1241693396
b'PyGithub/PyGithub',2542,True,False,b' - CODE - ',b'def rerequest(self) -> bool:',Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/2542#discussion_r1241020488
b'PyGithub/PyGithub',2542,True,False,b' - CODE - ',b':calls: `POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest <https://docs.github.com/en/rest/checks/runs?apiVersion=2022-11-28#rerequest-a-check-run>`_',Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/2542#discussion_r1241613865
b'PyGithub/PyGithub',2537,False,False,b'use new generic `github.GithubObkect.Attribute`',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2537#discussion_r1245027489
b'PyGithub/PyGithub',2537,False,False,b'No need to fo this ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2537#discussion_r1245028506
b'PyGithub/PyGithub',2537,False,False,b'No need to use docstring for types ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2537#discussion_r1245029278
b'PyGithub/PyGithub',2537,False,False,b'Merge upstream please ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2537#discussion_r1245030022
b'PyGithub/PyGithub',2514,True,False,b' - CODE - ',"b'sphinx >6, <8'",Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/2514#discussion_r1252216494
b'PyGithub/PyGithub',2475,False,False,b'Please add inline pep484 type ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2475#discussion_r1245033881
b'PyGithub/PyGithub',2402,False,False,"b""what's this\xef\xbc\x9f""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2402#discussion_r1245035339
b'PyGithub/PyGithub',2396,False,False,"b""I'd prefer to add these three asserts to `BranchProtection.testAttributes` and record new replay data for `BranchProtection` with your fork branch.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1151764378
b'PyGithub/PyGithub',2396,False,False,"b'Hi @EnricoMi, I tried to do this in abb2bb9 , but was unable to capture new replay data. It failed to fetch PyGithub/integrations branch with 404, which I think is expected because this branch no longer exists.  Please see the full console output below. This is why I had originally moved the assertions out into a separate BranchProtections2 test, which ran against our fork. Is there a way to capture new replay data for tests run against the PyGithub/integrations branch? If not, could you please advise as to next steps?\r\n\r\nThank you for your help with this.\r\n\r\nConsole output: \r\n\r\n```\r\n(base) jacob@pop-os:~/workspace/curvewise/PyGithub$ pytest -k BranchProtection --record\r\n==================================================================================== test session starts =====================================================================================\r\nplatform linux -- Python 3.9.12, pytest-7.2.0, pluggy-1.0.0\r\nrootdir: /home/jacob/workspace/curvewise/PyGithub, configfile: pytest.ini\r\nplugins: anyio-3.5.0, cov-4.0.0\r\ncollected 748 items / 747 deselected / 1 selected\r\n\r\ntests/BranchProtection.py F                                                                                                                                                            [100%]\r\n\r\n========================================================================================== FAILURES ==========================================================================================\r\n______________________________________________________________________________ BranchProtection.testAttributes _______________________________________________________________________________\r\n\r\nself = <tests.BranchProtection.BranchProtection testMethod=testAttributes>\r\n\r\n    def setUp(self):\r\n        super().setUp()\r\n        self.branch_protection = (\r\n>           self.g.get_user()\r\n            .get_repo(""PyGithub"")\r\n            .get_branch(""integrations"")\r\n            .get_protection()\r\n        )\r\n\r\ntests/BranchProtection.py:30:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\ngithub/AuthenticatedUser.py:1069: in get_repo\r\n    headers, data = self._requester.requestJsonAndCheck(\r\ngithub/Requester.py:402: in requestJsonAndCheck\r\n    return self.__check(\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <github.Requester.Requester object at 0x7f2b8ea62370>, status = 404\r\nresponseHeaders = {\'DEBUG_FRAME\': 1, \'access-control-allow-origin\': \'*\', \'access-control-expose-headers\': \'ETag, Link, Location, Retry-A...nterval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset\', \'content-encoding\': \'gzip\', ...}\r\noutput = {\'documentation_url\': \'https://docs.github.com/rest/reference/repos#get-a-repository\', \'message\': \'Not Found\'}\r\n\r\n    def __check(self, status, responseHeaders, output):\r\n        output = self.__structuredFromJson(output)\r\n        if status >= 400:\r\n>           raise self.__createException(status, responseHeaders, output)\r\nE           github.GithubException.UnknownObjectException: 404 {""message"": ""Not Found"", ""documentation_url"": ""https://docs.github.com/rest/reference/repos#get-a-repository""}\r\n\r\ngithub/Requester.py:427: UnknownObjectException\r\n====================================================================================== warnings summary ======================================================================================\r\n../../../anaconda3/lib/python3.9/site-packages/requests/__init__.py:102\r\n  /home/jacob/anaconda3/lib/python3.9/site-packages/requests/__init__.py:102: RequestsDependencyWarning: urllib3 (1.26.9) or chardet (5.1.0)/charset_normalizer (2.0.4) doesn\'t match a supported version!\r\n    warnings.warn(""urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn\'t match a supported ""\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\r\n================================================================================== short test summary info ===================================================================================\r\nFAILED tests/BranchProtection.py::BranchProtection::testAttributes - github.GithubException.UnknownObjectException: 404 {""message"": ""Not Found"", ""documentation_url"": ""https://docs.github.com/rest/reference/repos#get-a-repository""}\r\n======================================================================== 1 failed, 747 deselected, 1 warning in 1.19s ========================================================================\r\n```'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1152182606
b'PyGithub/PyGithub',2396,False,False,"b'I think it is easiest to target a branch in your fork, which you can access and create as needed.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1152201931
b'PyGithub/PyGithub',2396,False,False,"b""Hi @EnricoMi, thanks for your reply. Should we try to maintain [these two assertions](\r\nhttps://github.com/PyGithub/PyGithub/pull/2396/files#diff-261145a43f95fd792d69eafb577cd82b8f3a2d1fb090c5d756adf8b87b00ec26L37-L40\r\n) from the original test case?\r\n\r\nWe don't currently have required status checks set up on any branch in our fork, but I could try to add them.\r\n\r\nLet me know what you think.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1153906906
b'PyGithub/PyGithub',2396,False,False,b'Hi @EnricoMi I just wanted to follow up on this. Thanks for your time and attention to this.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1156428719
b'PyGithub/PyGithub',2396,False,False,"b""Shouldn't this already be a `bool`? Why the need to cast it?""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1159078792
b'PyGithub/PyGithub',2396,False,False,b'Fixed in 08546365d5160dd63360af8a4d21d8e6d269bde8\r\n',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1163381150
b'PyGithub/PyGithub',2396,False,False,"b'Yes, it would be great if you could add a `required_status_check` like this to keep these assertions.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1220895163
b'PyGithub/PyGithub',2396,False,False,"b'I think this file is not needed any more, right?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1220898045
b'PyGithub/PyGithub',2396,False,False,"b'Sorry for the delay. Yes, it would be great if you could add a `required_status_checks` to keep those two assertions.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1220899634
b'PyGithub/PyGithub',2396,False,False,b'Done in c80d8eab2748b30e85e3ba19873c7033c43403c3\r\n',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1221970651
b'PyGithub/PyGithub',2396,False,False,b'Completed in c9a9fec8c54ff2512d686b46b25c640b54506d14\r\n',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1224546688
b'PyGithub/PyGithub',2396,False,False,b'Completed in c9a9fec8c54ff2512d686b46b25c640b54506d14\r\n',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2396#discussion_r1224546959
b'PyGithub/PyGithub',2389,False,False,"b'Should this be Union[str, _NotSetType] ? since the parameter created is a string as mentioned in GitHub Docs\r\nhttps://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2389#discussion_r1065378608
b'PyGithub/PyGithub',2389,False,False,"b'I think we can use str or datetime, if using datetime, we can convert it to str internally \r\n\r\nAlso need to keep pyi synced with py.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2389#discussion_r1245039434
b'PyGithub/PyGithub',2356,False,False,b'can you also add inline type\xef\xbc\x9f',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2356#discussion_r1245042017
b'PyGithub/PyGithub',2316,False,False,"b""These look so close that could combine them? Add another argument for kind/type and assert it's one of actions or dependabot, since everything else is identical.\r\n\r\nFurther, I also like to support passing in the repository id as an int as well, but that's a nice to have.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2316#discussion_r1083646024
b'PyGithub/PyGithub',2316,False,False,"b'@s-t-e-v-e-n-k  fixed  can you recheck, please '",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2316#discussion_r1086011882
b'PyGithub/PyGithub',2316,False,False,"b""Does this fail the docs build? It's actually /orgs/{org}/{secret_type} anyway.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2316#discussion_r1099622299
b'PyGithub/PyGithub',2316,False,False,b'fixed please recheck ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2316#discussion_r1101470724
b'PyGithub/PyGithub',2278,False,False,b'Attribute `parent_team_id` of `Organization` has to be set in `_useAttributes`',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2278#discussion_r1257200637
b'PyGithub/PyGithub',2278,False,False,b'Can we assert the `parent_team_id` in `testAttributes`? I may have to record replay data for this.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2278#discussion_r1257201270
b'PyGithub/PyGithub',2268,False,False,"b'not related to the function description \r\ndesc\r\n`:calls: \'PUT {org_url}/actions/secrets/{secret_name}`\r\n\r\nfunc:\r\n\r\n`""PUT"", f""{self.url}/repositories/{repo.id}""`'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2268#discussion_r978139253
b'PyGithub/PyGithub',2268,False,False,"b'same here may \r\n` :calls: \'DELETE {org_url}/actions/secrets/{secret_name}`\r\n\r\n`""DELETE"", f""{self.url}/repositories/{repo.id}""`'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2268#discussion_r978139967
b'PyGithub/PyGithub',2265,True,False,b' - CODE - ',b'def members_allowed_repository_creation_type(self) -> str: ...',Accepted,939928.0,https://github.com/PyGithub/PyGithub/pull/2265#discussion_r1224034297
b'PyGithub/PyGithub',2265,False,False,b'Please add this test to `Organization.py`.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2265#discussion_r1224036830
b'PyGithub/PyGithub',2066,False,False,"b""This change is one reason why CI fails -- sadly it's a sharp edge.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2066#discussion_r726765963
b'PyGithub/PyGithub',2066,False,False,b'I do wonder if this actually throws an exception?',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2066#discussion_r726766428
b'PyGithub/PyGithub',2066,False,False,"b""Yeah, I was ... confused. I think I've fixed it, though? We'll see when the tests finish again, I guess.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2066#discussion_r730050590
b'PyGithub/PyGithub',2066,False,False,"b'The only two error codes GitHub gives you on failure are either ""409 Conflict"" if you have a merge conflict or ""422 Unprocessable Entity"" if ""some other reason"" prevented the merge. I briefly thought of raising an exception on the 422, and returning `False` for 409, but I wasn\'t totally sure everything related to a 422 was something truly exceptional. But it sort of makes sense, I guess? Maybe if I use the response message as the exception text?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/2066#discussion_r730053407
b'PyGithub/PyGithub',1791,False,False,"b""I also don't think this method belongs in the `Installation` object as that is a `NonCompletable` and also the API call does not depend on any of the Installation attributes. It should be moved to the `github.Github.get_installation_repos`.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r545713464
b'PyGithub/PyGithub',1791,False,False,"b'Hey, should we add a deprecation warning for this method instead of removing it completely?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r548355483
b'PyGithub/PyGithub',1791,False,False,"b""There's a :meth: link, I *think* there's an existing example, means the method and the class are both links.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r589147579
b'PyGithub/PyGithub',1791,False,False,"b'That would be nice, particularly if you only have an installation token and are not generating one. This is what happens in Github Actions.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r696783977
b'PyGithub/PyGithub',1791,False,False,b'This is now implemented by `GithubInstallation.get_app_installation(installation_id)`.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r1244847694
b'PyGithub/PyGithub',1791,False,False,"b'This is now implemented by `GithubIntegration.get_repo_installation(owner, repo)`.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r1244848488
b'PyGithub/PyGithub',1791,False,False,"b'Class `github.Github` is already cluttered with lots of class specific methods.\r\n\r\nWhy is `Github.get_installation_repos` better than `installation.get_repos`? With the latter it is clear that this requires an installation auth, while `Github` can be used with lots of different authentications, but that method works only with an installation auth.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1791#discussion_r1244858515
b'PyGithub/PyGithub',1784,False,False,"b'Just return create_git_ref, we can deal with its return value. This function also needs a docstring.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543974097
b'PyGithub/PyGithub',1784,False,False,b'Perhaps a default value for force of False? And also need a docstirng.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543974753
b'PyGithub/PyGithub',1784,False,False,b'As above -- just return the call to GitRef.delete()',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543975233
b'PyGithub/PyGithub',1784,False,False,b'Can you use with assertRaises() so we can see the content of the exception? There are a few other examples in the code base.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543976352
b'PyGithub/PyGithub',1784,False,False,b'As above.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r543976485
b'PyGithub/PyGithub',1784,True,False,b'You are just saying:  - CODE - ',"b'return self.head.repo.create_git_ref(""refs/heads/"" + self.head.ref, sha=self.head.sha)\n```'",Accepted,1050523.0,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r544405780
b'PyGithub/PyGithub',1784,False,False,"b""I mean, it sort of does, but it also doesn't. I'd prefer this linked to create_git_ref using :meth: or something similar.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600127446
b'PyGithub/PyGithub',1784,False,False,"b'This can now be `f""refs/heads/{self.head.ref}""`'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600128023
b'PyGithub/PyGithub',1784,False,False,"b'False is implied, just self.delete_branch()'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600128193
b'PyGithub/PyGithub',1784,False,False,"b""Does it, though? We call delete() on that, so surely it's bool""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600128591
b'PyGithub/PyGithub',1784,False,False,"b'Same comment as above, we call a method to do the work here.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600128737
b'PyGithub/PyGithub',1784,False,False,"b""Personally, I'd prefer:\r\n\r\n```\r\nif not force:\r\n    <check remaining PRs>\r\nreturn self.head.repo.get_git_ref...\r\n```""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600129109
b'PyGithub/PyGithub',1784,False,False,b'Can also be an f-string now',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600129214
b'PyGithub/PyGithub',1784,False,False,"b""with self.assertRaises(github.GithubException) ...   which also means you don't need the import at the top""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600129491
b'PyGithub/PyGithub',1784,False,False,b'assertIs when checking against None',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r600131712
b'PyGithub/PyGithub',1784,False,False,b'Convenience function that calls :meth:`Repository.create_git_ref`',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806623
b'PyGithub/PyGithub',1784,False,False,b'As above',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806639
b'PyGithub/PyGithub',1784,False,False,b'This branch is no longer required.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806657
b'PyGithub/PyGithub',1784,False,False,"b""Are any PRs linked to a force deleted branch also deleted? I'd be interested to see if that is the case.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806767
b'PyGithub/PyGithub',1784,False,False,"b'github is always injected into the test classes, you can drop this import.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806811
b'PyGithub/PyGithub',1784,False,False,"b""Check the raised exception data once, I don't see the need to repeat it everywhere.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r602806872
b'PyGithub/PyGithub',1784,False,False,"b'Understood, would you say we remove line 421 or remove lines 422-429?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r603479355
b'PyGithub/PyGithub',1784,False,False,"b'Yes, a PR with the head ref being the branch that is deleted gets closed.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r603483025
b'PyGithub/PyGithub',1784,False,False,b'Oops.. I tested with the branch of this PR \xf0\x9f\xa4\xa6 ',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r603484088
b'PyGithub/PyGithub',1784,False,False,b'Removing this line causes the test cases in this file to fail. See https://github.com/PyGithub/PyGithub/actions/runs/698739235',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r603501940
b'PyGithub/PyGithub',1784,False,False,b'Missing `.pyi` file API addition',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1218170338
b'PyGithub/PyGithub',1784,False,False,b'Missing `.pyi` file API modification',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1218170620
b'PyGithub/PyGithub',1784,False,False,b'Missing `.pyi` file API addition',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1218170731
b'PyGithub/PyGithub',1784,True,False,b' - CODE - ',"b'delete_branch=False,'",Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244807292
b'PyGithub/PyGithub',1784,False,False,"b""To be honest, I don't like adding this side-effect here. Given we have `delete_branch`, it is very easy for users to delete the branch with a single line after `merge` returned. When more pull requests remain, `delete_branch` raises an error and call site does not get the successful `PullRequestMergeStatus` response.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244815162
b'PyGithub/PyGithub',1784,True,False,"b'I would not call this `AttributeError`, because the values of the attributes are right, This is more a `RuntimeError`, as `delete_branch(force=False)` should not be called as long as there exist pull requests. - CODE - '","b'raise RuntimeError(\n                    ""This branch is referenced by open pull requests, set force=True to delete this branch.""\n                )\n```'",Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244821525
b'PyGithub/PyGithub',1784,False,False,b'Please add some notes on the semantics of `force`.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244823030
b'PyGithub/PyGithub',1784,True,False,b'Why this assertion? - CODE - ',b'self.delete_restore_pull.delete_branch(force=False)\n```',Ignored/Rejected,No Reaction,https://github.com/PyGithub/PyGithub/pull/1784#discussion_r1244831624
b'PyGithub/PyGithub',1676,False,False,"b'List[] including the types, such as List[str], please.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r481704246
b'PyGithub/PyGithub',1676,False,False,"b'Can we have a better name, such as OrganizationAuthorization?'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r481705556
b'PyGithub/PyGithub',1676,False,False,"b""You also need to test delete, but I'd also prefer we return something so we can verify the returned attributes.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r481705848
b'PyGithub/PyGithub',1676,False,False,b'space in the email address.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r481706360
b'PyGithub/PyGithub',1676,False,False,"b'I will need to wait in that case, since the only Organization I have available at the moment,with SAML SSO, is private. I can not display the credentials list in the --record. I will ask GitHub sales for a trial for Entreprise Org hosted on GitHub.'",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r484069993
b'PyGithub/PyGithub',1676,False,False,"b""list of :class:`github.AuthorizationOrganization.AuthorizationOrganization`_\r\n\r\n(I'm not certain of the formatting, but roughly that, please)""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r512400756
b'PyGithub/PyGithub',1676,False,False,b'The return type is not None.',No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r512400964
b'PyGithub/PyGithub',1676,False,False,"b""I'd like more detail here, along with a link to the documentation of the object.""",No Code,-,No Reaction,https://github.com/PyGithub/PyGithub/pull/1676#discussion_r512401210
